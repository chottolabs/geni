name: Rust

on:
  pull_request:
  push:
    branches:
      - '*'
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install docker for macos
      if: startsWith(matrix.os, 'macos-')
      uses: douglascamata/setup-docker-macos-action@v1-alpha
    - name: Databases
      run: docker compose up -d
    - name: Run tests
      run: cargo test --verbose
  build-binary:
    needs: [test]
    strategy:
      matrix:
        include:
          - os: linux
            image: ubuntu-latest
            arch: 386
            setup: |
              sudo apt-get update
              sudo apt-get install -qq gcc-i686-linux-gnu
              sudo apt-get install -qq libssl-dev
              sudo apt-get install -qq gcc-multilib
            env: {}
          - os: linux
            image: ubuntu-latest
            arch: amd64
            env: {}
          - os: linux
            image: ubuntu-latest
            arch: arm
            setup: |
              sudo apt-get update
              sudo apt-get install -qq gcc-arm-linux-gnueabi 
              sudo apt-get install -qq libssl-dev
            env: 
              TARGET: aarch64-unknown-linux-gnu
          - os: linux
            image: ubuntu-latest
            arch: arm64
            setup: |
              sudo apt-get update
              sudo apt-get install -qq gcc-aarch64-linux-gnu
              sudo apt-get install -qq libssl-dev
            env:
              TARGET: aarch64-unknown-linux-gnu
          - os: macos
            image: macos-latest
            arch: amd64
            env: {}
          - os: macos
            image: macos-latest
            arch: arm64
            env: {}
          - os: windows
            image: windows-latest
            arch: amd64
            env: {}
    name: Build (${{ matrix.os }}/${{ matrix.arch }})
    runs-on: ${{ matrix.image }}
    env: ${{ matrix.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4  
      - name: Setup environment
        run: ${{ matrix.setup }}
      - name: Add clang path to $PATH env
        shell: bash
        if: runner.os == 'windows'
        run: echo "PATH=$PATH:C:\msys64\mingw64\bin" >> $GITHUB_ENV
      - name: Build
        run: cargo build --release --verbose
      - name: Package
        shell: bash
        run: |
          cp target/release/geni geni-${{matrix.arch}}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.arch}}
          path: geni-${{matrix.arch}}
      - name: Publish to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
            files: 'geni*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
